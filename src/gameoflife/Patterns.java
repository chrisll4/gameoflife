package gameoflife;
/**
 * Simple class containing some basic patterns for selection in GUI.
 * @author Fredrik, Christine (pair programming)
 */
public class Patterns {
  
  /**
   * Byte information for a glider pattern
   */
  protected static byte[][] glider = {
    {0,0,1},
    {1,0,1},
    {0,1,1}
  };
  
  /**
   * Byte information for a pulsar pattern
   */
  protected static byte[][] pulsar = {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,1,0,0,0,0,1,0,1,0,0,0,0,1,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,1,1,1,0,0,0,1,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  };
  
  /**
   * Byte information for a Gosper glider gun pattern
   */
  protected static byte[][] gosper = {
    {0,0,0,0,1,1,0,0,0},
    {0,0,0,0,1,1,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,1,1,1,0,0},
    {0,0,0,1,0,0,0,1,0},
    {0,0,1,0,0,0,0,0,1},
    {0,0,1,0,0,0,0,0,1},
    {0,0,0,0,0,1,0,0,0},
    {0,0,0,1,0,0,0,1,0},
    {0,0,0,0,1,1,1,0,0},
    {0,0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,0,0,0,0},
    {0,0,1,1,1,0,0,0,0},
    {0,1,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {1,1,0,0,0,1,1,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0},
    {0,0,1,1,0,0,0,0,0},
    {0,0,1,1,0,0,0,0,0},
  };
  
  /**
   * Byte information container for random pattern generated by
   * generateRandomPattern()
   */
  protected static byte[][] randomPattern;
  
  /**
   * Method to generate random pattern with the dimensions specified by params
   * @param cols Columns/width of pattern to be generated
   * @param rows Rows/height of pattern to be generated
   * @author Fredrik
   */
  protected static void generateRandomPattern(int cols, int rows) {
    randomPattern = new byte[cols][rows];
    
    for (int i=0; i<cols; i++) {
      for (int j=0; j<rows; j++) {
        randomPattern[i][j] = (byte) (Math.random()*2);
      }
    }
  }
  
  
}
